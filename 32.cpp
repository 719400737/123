#include<bits/stdc++.h>
using namespace std;

class Solution {
public:
    /*
    int longestValidParentheses(string s) {
        int res=0;
        bool flag=false;
        for(int i=0;i<s.size();i++){
            for(int j=i+2;j<=s.size();j+=2){
                flag=false;
                string temp=s.substr(i,j-i);
                stack<char> st;
                for(int t=0;t<temp.size();t++){//判断temp是否合格
                    if(temp[t]=='('){
                        st.push(temp[t]);
                    }
                    else{
                        if(st.empty()){
                            flag=true;
                            break;
                        }
                        st.pop();
                    }
                }
                if(flag)
                    break;
                if(st.empty())
                    res=max(res,j-i);
            }
        }
        return res;
    }
    */
    int longestValidParentheses(string s){ //dp方法
        int n=s.size();
        vector<int> dp(n,0);
        int res=0;
        for(int i=0;i<n;i++){
            if(i==0 || s[i]=='(')
                continue;
            else{
                if(s[i-1]=='('){
                    if(i<2)
                        dp[i]=2;
                    else
                        dp[i]=dp[i-2]+2;
                }
                else{
                    int temp=i-dp[i-1]-1;
                    if(temp>=0 && s[temp]=='('){
                        dp[i]=dp[i-1]+2;
                        if(temp>=1)
                        dp[i]+=dp[temp-1];
                    }
                }
            }
            res=max(res,dp[i]);
        }
        return res;
    }
};

int main(){
    string s
    // string s="()(())";
    Solution s2;
    int res;
    res=s2.longestValidParentheses(s);
    cout<<res<<endl;
    return 0;
}